from typing import Any
from _typeshed import Incomplete

# from email.generator import BytesGenerator

# V1_DISCOVERY_URI = DISCOVERY_URI

# class _BytesGenerator(BytesGenerator): ...

# def fix_method_name(name): ...
# def key2param(key): ...
def build(serviceName: str, version: str, http: Incomplete | None = ..., discoveryServiceUrl: Incomplete | None = ..., developerKey: Incomplete | None = ..., model: Incomplete | None = ..., requestBuilder: Incomplete = ..., credentials: Incomplete | None = ..., cache_discovery: bool = ..., cache: Incomplete | None = ..., client_options: Incomplete | None = ..., adc_cert_path: Incomplete | None = ..., adc_key_path: Incomplete | None = ..., num_retries: int = ..., static_discovery: Incomplete | None = ..., always_use_jwt_access: bool = ...) -> Any: ...  # noqa
# def build_from_document(service, base: Incomplete | None = ..., future: Incomplete | None = ..., http: Incomplete | None = ..., developerKey: Incomplete | None = ..., model: Incomplete | None = ..., requestBuilder=..., credentials: Incomplete | None = ..., client_options: Incomplete | None = ..., adc_cert_path: Incomplete | None = ..., adc_key_path: Incomplete | None = ..., always_use_jwt_access: bool = ...): ...

# class ResourceMethodParameters:
#     argmap: Incomplete
#     required_params: Incomplete
#     repeated_params: Incomplete
#     pattern_params: Incomplete
#     query_params: Incomplete
#     path_params: Incomplete
#     param_types: Incomplete
#     enum_params: Incomplete
#     def __init__(self, method_desc) -> None: ...
#     def set_parameters(self, method_desc) -> None: ...

# class Resource:
#     def __init__(self, http, baseUrl, model, requestBuilder, developerKey, resourceDesc, rootDesc, schema) -> None: ...
#     def __enter__(self): ...
#     def __exit__(self, exc_type, exc, exc_tb) -> None: ...
#     def close(self) -> None: ...
