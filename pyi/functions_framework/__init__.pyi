# import io
# from _typeshed import Incomplete
from _typeshed import IdentityFunction
from typing import Optional, Callable
from flask import Request
# from functions_framework import event_conversion as event_conversion
# from functions_framework.background_event import BackgroundEvent as BackgroundEvent
# from functions_framework.exceptions import EventConversionException as EventConversionException, FunctionsFrameworkException as FunctionsFrameworkException, MissingSourceException as MissingSourceException
# from inspect import signature as signature
#
# class _LoggingHandler(io.TextIOWrapper):
#     level: Incomplete
#     stderr: Incomplete
#     def __init__(self, level, stderr=...) -> None: ...
#     def write(self, out): ...
#
# def cloud_event(func): ...
# def typed(*args): ...
def http(func: Callable[[Optional[Request]], str]) -> IdentityFunction: ...
# def setup_logging(): ...
# def read_request(response): ...
# def crash_handler(e): ...
# def create_app(target: Incomplete | None = ..., source: Incomplete | None = ..., signature_type: Incomplete | None = ...): ...
#
# class LazyWSGIApp:
#     target: Incomplete
#     source: Incomplete
#     signature_type: Incomplete
#     app: Incomplete
#     def __init__(self, target: Incomplete | None = ..., source: Incomplete | None = ..., signature_type: Incomplete | None = ...) -> None: ...
#     def __call__(self, *args, **kwargs): ...
#
# app: Incomplete
#
# class DummyErrorHandler:
#     def __init__(self) -> None: ...
#     def __call__(self, *args, **kwargs): ...
#
# errorhandler: Incomplete
